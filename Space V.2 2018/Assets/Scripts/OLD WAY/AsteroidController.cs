using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using CoreFunctions3;

    /*
    NOTE TO SELF:   Searching through a list of prefabs is inefficient. It may be better to search a list of traits generated by each HARD 
    AstroidDEF individualy. Ill let you know what I think.
    */
    public class AsteroidController : MonoBehaviour
    {
        public CoreFunctions CoreFunction = new CoreFunctions();
        public string AsteroidFilePath;
        public Dictionary<string, GameObject> AsteroidPrefabs = new Dictionary<string, GameObject>();
        public Dictionary<string, AsteroidDef> AsteroidTypes = new Dictionary<string, AsteroidDef>();
        public List<LootObject> AsteroidGenTable = new List<LootObject>(); //You Care about this. //Table of loot object created from the AsteroidDefs
        public List<LootObject> AsteroidGenStorage = new List<LootObject>(); //Storage for the randomly generated asteroids to asign to objects
    public GameObject TESTOBJECT;
        public int AvalibleGens = 0;
        public int RegenAvalible = 40;
        bool init = false;
        bool initGenTable = false;
        //Just in Case
        //AsteroidDef TestAsteroid = new AsteroidDef("TestAsteroid", "Test", 56, true, "Red", new string[] { "Red", "Electric" }, "Red", new Range(3, 30), new Range(15, 40));
        //AsteroidDef BlueTestAsteroid = new AsteroidDef("BlueTestAsteroid", "TestBlue", 56, true, "Blue", new string[] { "Red", "Electric", "Red" }, "blue", new Range(3, 300), new Range(17, 45));


        // Start is called before the first frame update
        void Start()
        {
        if (init == false)
            {
                InitAsteroids(AsteroidTypes);
                GetAsteroids(AsteroidFilePath);
                init = true;
            }
        }

        // Update is called once per frame
        void Update()
        {


        }

        public GameObject GenAsteroid()
        {
            if(!init == true)
            {
                InitAsteroids(AsteroidTypes);
                GetAsteroids(AsteroidFilePath);
                init = true;
            }
            if(AvalibleGens < 1)
            {
                (AsteroidGenStorage , AsteroidGenTable) = CoreFunction.GenLootFromTableADV(AsteroidGenTable, 0, (initGenTable ? true : false) ,RegenAvalible);
                initGenTable = true;
                AvalibleGens = AsteroidGenStorage.Count;
            }

            //Gets Asteroid Object
            AsteroidDef returnval = (AsteroidDef) AsteroidGenStorage[0].object1;
            AsteroidGenStorage.RemoveAt(0);
            AvalibleGens = AsteroidGenStorage.Count;
        Debug.LogWarning(AvalibleGens);

            //Gets Asteroid Model Prefab
            List<GameObject> ReturnPrefabLst = FindAstroidOfType(returnval.PrefabIdentifyers, AsteroidPrefabs);
            GameObject ReturnPrefab =  ReturnPrefabLst[0];
        Debug.LogError("CREATED AN ASTEROID");
            return (TESTOBJECT); //Fix Later
        }




        public class AsteroidDef
        {
            public string name;
            public string Type;
            public float health;
            public bool hasRigidbody;
            public string colourRange;
            public string[] PrefabIdentifyers;
            public string EnergyType;
            public Range speedRange;
            public Range sizeRange;
            public GameObject dropitem;
            public GameObject SpecialProperties;


            public AsteroidDef(string Name1, string Type1, float health1, bool hasRigidbody1, string Colour, string[] PrefabIdentifyers1, string EnergyType1, Range speedRange1, Range sizeRange1, GameObject dropitem1 = null, GameObject SPECIAL = null)
            {
                name = Name1;
                Type = Type1;
                health = health1;
                hasRigidbody = hasRigidbody1;
                colourRange = Colour;
                PrefabIdentifyers = PrefabIdentifyers1;
                EnergyType = EnergyType1;
                speedRange = speedRange1;
                sizeRange = sizeRange1;
                dropitem = dropitem1;
                SpecialProperties = SPECIAL;
            }


        }
    /// <summary>
    /// THE FOLLOWING ARE COMPLETELY INCORECT AND ARE SUBJECT TO REMOVAL. SEE ME FOR DETAILS :: WE ARE REQORKING IN PROPER OOP FASION
    /// </summary>
    /// <param name="Table"></param>
        //Initializes Asteroids
        void InitAsteroids(Dictionary<string, AsteroidDef> Table)
        {
            Table.Clear();
            //Creates Types of Asteroids. Must be added to the Asteroid Table
            AsteroidDef TestAsteroid = new AsteroidDef("TestableAsteroid", "Testable", 56, true, "Red",new string[] { "Green", "Lava" }, "Red", new Range(3, 30), new Range(15, 40));
            AsteroidDef BlueTestAsteroid = new AsteroidDef("BlueTestAsteroid", "TestBlue", 56, true, "Blue", new string[] {"Electric", "Green" }, "blue", new Range(3, 300), new Range(17, 45));
            //Adds Asteroids to the Asteroid Table for class grab functionality
            // Table.Add(TestAsteroid.name, TestAsteroid);
            Table.Add(BlueTestAsteroid.name, BlueTestAsteroid);
            //Adds Asteroids to the "Loot" table for spawn functionality
           // AsteroidGenTable.Add(new LootObject("TestAst", 3, TestAsteroid));
            AsteroidGenTable.Add(new LootObject("BlueTestAster", 2, BlueTestAsteroid));
            
        }



        //Create new Function that takes a request from astroid spawner
        //Consults Loot Tables
        //Returns Astroid Type

        /*  //THIS ITEM HAS BEEN MOVED TO :: CoreFunctions.cs
        public struct LootObject
        {
            public string Name;
            public float SpawnWeight;
            public GameObject Gameobject;

            public LootObject(string N, float SW, GameObject GO)
            {
                Name = N;
                SpawnWeight = SW;
                Gameobject = GO;
            }
        }
        */

        //Finds Asteroids from list of prefabs taken by GetAsteroids
        List<GameObject> FindAstroidOfType(string[] Param, Dictionary<string, GameObject> ObjectList, int CheckCount = 0)
        {
            if (CheckCount == 0) //If no Check Count is specified, assume all string parameters are necessary.
            {
                CheckCount = Param.Length;
            }
            int NewCheckCount = CheckCount;
            List<GameObject> ReturnSet = new List<GameObject>();
            foreach (KeyValuePair<string, GameObject> x in ObjectList) //Cycles Through List of Prefabs  --- Returns Eligable Memebers
            {
                NewCheckCount = 0; //Clears the number of checks
                foreach (string Condition in Param)  //Cycles through Conditions in Param
                {
                    if (x.Key.Contains(Condition))  //If a condition is found ++ Add one
                    {
                        NewCheckCount++;
                    }
                    if (NewCheckCount == CheckCount) //If the minimum number of conditions are met --> Add the game object to the return list and cycle to next Key Value Pair in ObjectList
                    {
                        ReturnSet.Add(x.Value);
                        break;
                    }
                }
            }
            return ReturnSet;
        }


        //Gets the Asteroids from Reasorce Folder
        void GetAsteroids(string ASFP)
        {
            Object[] TempAsstroidArray = Resources.LoadAll(ASFP, typeof(GameObject));
            AsteroidPrefabs = new Dictionary<string, GameObject>();
            foreach (Object Asteroid in TempAsstroidArray)
            {
                if (Asteroid is GameObject && Asteroid.name != null)
                {
                    AsteroidPrefabs.Add(Asteroid.name, ((GameObject)Asteroid));
                    Debug.Log("Added Astroid: " + Asteroid.name + "To Astroid Prefabs");
                }

            }



        }
    }
